<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kill0es.github.io</id>
    <title>quansen88.cn</title>
    <updated>2021-06-18T05:31:07.614Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kill0es.github.io"/>
    <link rel="self" href="https://kill0es.github.io/atom.xml"/>
    <subtitle>linux运维</subtitle>
    <logo>https://kill0es.github.io/images/avatar.png</logo>
    <icon>https://kill0es.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, quansen88.cn</rights>
    <entry>
        <title type="html"><![CDATA[kms激活win11 Pro]]></title>
        <id>https://kill0es.github.io/xvRxb2T0y/</id>
        <link href="https://kill0es.github.io/xvRxb2T0y/">
        </link>
        <updated>2021-06-17T06:16:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="20210617kms激活win11-pro">20210617kms激活win11 Pro</h1>
<blockquote>
<p>【kms服务器】参考：https://hub.docker.com/r/luodaoyi/kms-server</p>
</blockquote>
<h3 id="一-管理员权限运行cmd">一、管理员权限运行cmd</h3>
<ol>
<li>
<p>根据系统版本安装key</p>
<p>a. 获取系统版本信息</p>
</li>
</ol>
<pre><code>wmic os get caption
</code></pre>
<p>b. 得到对应key后，安装key</p>
<p>[pro]</p>
<pre><code>slmgr /ipk VK7JG-NPHTM-C97JM-9MPGT-3V66T
</code></pre>
<blockquote>
<p>官网key：https://technet.microsoft.com/en-us/library/jj612867.aspx</p>
<p><a href="https://www.jb51.net/os/win11/779278.html">怎么激活win11系统?win11激活密钥+激活工具分享_windows11_Windows系列_操作系统_脚本之家 (jb51.net)</a></p>
<p>或从下方查找</p>
</blockquote>
<ol start="2">
<li>
<p><strong>设置激活服务端的地址</strong></p>
<p>服务器地址失效请百度找一个</p>
<p>本地kms可行</p>
<p>可尝试第三方激活软件</p>
</li>
</ol>
<pre><code>slmgr /skms zh.us.to
</code></pre>
<ol start="3">
<li>尝试激活</li>
</ol>
<pre><code>slmgr /ato
</code></pre>
<h3 id="二-完成">二、完成</h3>
<h1 id="windows-gvlk密钥对照表kms激活专用">Windows GVLK密钥对照表（KMS激活专用）</h1>
<h2 id="windows-11">Windows 11</h2>
<table>
<thead>
<tr>
<th>操作系统</th>
<th style="text-align:left">KMS激活序列号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 11 home</td>
<td style="text-align:left">YTMG3-N6DKC-DKB77-7M9GH-8HVX7</td>
</tr>
<tr>
<td>Windows 11 pro</td>
<td style="text-align:left">VK7JG-NPHTM-C97JM-9MPGT-3V66T</td>
</tr>
</tbody>
</table>
<blockquote>
<p>以下key来源于微软官网：https://technet.microsoft.com/en-us/library/jj612867.aspx</p>
</blockquote>
<h2 id="windows-server-2016">Windows Server 2016</h2>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>KMS激活序列号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Server 2016 Datacenter</td>
<td>CB7KF-BWN84-R7R2Y-793K2-8XDDG</td>
</tr>
<tr>
<td>Windows Server 2016 Standard</td>
<td>WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY</td>
</tr>
<tr>
<td>Windows Server 2016 Essentials</td>
<td>JCKRF-N37P4-C2D82-9YXRT-4M63B</td>
</tr>
</tbody>
</table>
<h2 id="windows-10">Windows 10</h2>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>KMS激活序列号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 10 Professional</td>
<td>W269N-WFGWX-YVC9B-4J6C9-T83GX</td>
</tr>
<tr>
<td>Windows 10 Professional N</td>
<td>MH37W-N47XK-V7XM9-C7227-GCQG9</td>
</tr>
<tr>
<td>Windows 10 Enterprise</td>
<td>NPPR9-FWDCX-D2C8J-H872K-2YT43</td>
</tr>
<tr>
<td>Windows 10 Enterprise N</td>
<td>DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</td>
</tr>
<tr>
<td>Windows 10 Education</td>
<td>NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</td>
</tr>
<tr>
<td>Windows 10 Education N</td>
<td>2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</td>
</tr>
<tr>
<td>Windows 10 Enterprise 2015 LTSB</td>
<td>WNMTR-4C88C-JK8YV-HQ7T2-76DF9</td>
</tr>
<tr>
<td>Windows 10 Enterprise 2015 LTSB N</td>
<td>2F77B-TNFGY-69QQF-B8YKP-D69TJ</td>
</tr>
<tr>
<td>Windows 10 Enterprise 2016 LTSB</td>
<td>DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</td>
</tr>
<tr>
<td>Windows 10 Enterprise 2016 LTSB N</td>
<td>QFFDN-GRT3P-VKWWX-X7T3R-8B639</td>
</tr>
</tbody>
</table>
<h2 id="windows-server-2012-r2-和-windows-81">Windows Server 2012 R2 和 Windows 8.1</h2>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>KMS激活序列号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 8.1 Professional</td>
<td>GCRJD-8NW9H-F2CDX-CCM8D-9D6T9</td>
</tr>
<tr>
<td>Windows 8.1 Professional N</td>
<td>HMCNV-VVBFX-7HMBH-CTY9B-B4FXY</td>
</tr>
<tr>
<td>Windows 8.1 Enterprise</td>
<td>MHF9N-XY6XB-WVXMC-BTDCT-MKKG7</td>
</tr>
<tr>
<td>Windows 8.1 Enterprise N</td>
<td>TT4HM-HN7YT-62K67-RGRQJ-JFFXW</td>
</tr>
<tr>
<td>Windows Server 2012 R2 Server Standard</td>
<td>D2N9P-3P6X9-2R39C-7RTCD-MDVJX</td>
</tr>
<tr>
<td>Windows Server 2012 R2 Datacenter</td>
<td>W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9</td>
</tr>
<tr>
<td>Windows Server 2012 R2 Essentials</td>
<td>KNC87-3J2TX-XB4WP-VCPJV-M4FWM</td>
</tr>
</tbody>
</table>
<h2 id="windows-server-2012-和-windows-8">Windows Server 2012 和 Windows 8</h2>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>KMS激活序列号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 8 Professional</td>
<td>NG4HW-VH26C-733KW-K6F98-J8CK4</td>
</tr>
<tr>
<td>Windows 8 Professional N</td>
<td>XCVCF-2NXM9-723PB-MHCB7-2RYQQ</td>
</tr>
<tr>
<td>Windows 8 Enterprise</td>
<td>32JNW-9KQ84-P47T8-D8GGY-CWCK7</td>
</tr>
<tr>
<td>Windows 8 Enterprise N</td>
<td>JMNMF-RHW7P-DMY6X-RF3DR-X2BQT</td>
</tr>
<tr>
<td>Windows Server 2012</td>
<td>BN3D2-R7TKB-3YPBD-8DRP2-27GG4</td>
</tr>
<tr>
<td>Windows Server 2012 N</td>
<td>8N2M2-HWPGY-7PGT9-HGDD8-GVGGY</td>
</tr>
<tr>
<td>Windows Server 2012 Single Language</td>
<td>2WN2H-YGCQR-KFX6K-CD6TF-84YXQ</td>
</tr>
<tr>
<td>Windows Server 2012 Country Specific</td>
<td>4K36P-JN4VD-GDC6V-KDT89-DYFKP</td>
</tr>
<tr>
<td>Windows Server 2012 Server Standard</td>
<td>XC9B7-NBPP2-83J2H-RHMBY-92BT4</td>
</tr>
<tr>
<td>Windows Server 2012 MultiPoint Standard</td>
<td>HM7DN-YVMH3-46JC3-XYTG7-CYQJJ</td>
</tr>
<tr>
<td>Windows Server 2012 MultiPoint Premium</td>
<td>XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G</td>
</tr>
<tr>
<td>Windows Server 2012 Datacenter</td>
<td>48HP8-DN98B-MYWDG-T2DCC-8W83P</td>
</tr>
</tbody>
</table>
<h2 id="windows-7-and-windows-server-2008-r2">Windows 7 and Windows Server 2008 R2</h2>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>KMS激活序列号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 7 Professional</td>
<td>FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</td>
</tr>
<tr>
<td>Windows 7 Professional N</td>
<td>MRPKT-YTG23-K7D7T-X2JMM-QY7MG</td>
</tr>
<tr>
<td>Windows 7 Professional E</td>
<td>W82YF-2Q76Y-63HXB-FGJG9-GF7QX</td>
</tr>
<tr>
<td>Windows 7 Enterprise</td>
<td>33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</td>
</tr>
<tr>
<td>Windows 7 Enterprise N</td>
<td>YDRBP-3D83W-TY26F-D46B2-XCKRJ</td>
</tr>
<tr>
<td>Windows 7 Enterprise E</td>
<td>C29WB-22CC8-VJ326-GHFJW-H9DH4</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Web</td>
<td>6TPJF-RBVHG-WBW2R-86QPH-6RTM4</td>
</tr>
<tr>
<td>Windows Server 2008 R2 HPC edition</td>
<td>TT8MH-CG224-D3D7Q-498W2-9QCTX</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Standard</td>
<td>YC6KT-GKW9T-YTKYR-T4X34-R7VHC</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Enterprise</td>
<td>489J6-VHDMP-X63PK-3K798-CPX3Y</td>
</tr>
<tr>
<td>Windows Server 2008 R2 Datacenter</td>
<td>74YFP-3QFB3-KQT8W-PMXWJ-7M648</td>
</tr>
<tr>
<td>Windows Server 2008 R2 for Itanium-based Systems</td>
<td>GT63C-RJFQ3-4GMB6-BRFB9-CB83V</td>
</tr>
</tbody>
</table>
<h2 id="windows-vista-and-windows-server-2008">Windows Vista and Windows Server 2008</h2>
<table>
<thead>
<tr>
<th>操作系统</th>
<th>KMS激活序列号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows Vista Business</td>
<td>YFKBB-PQJJV-G996G-VWGXY-2V3X8</td>
</tr>
<tr>
<td>Windows Vista Business N</td>
<td>HMBQG-8H2RH-C77VX-27R82-VMQBT</td>
</tr>
<tr>
<td>Windows Vista Enterprise</td>
<td>VKK3X-68KWM-X2YGT-QR4M6-4BWMV</td>
</tr>
<tr>
<td>Windows Vista Enterprise N</td>
<td>VTC42-BM838-43QHV-84HX6-XJXKV</td>
</tr>
<tr>
<td>Windows Web Server 2008</td>
<td>WYR28-R7TFJ-3X2YQ-YCY4H-M249D</td>
</tr>
<tr>
<td>Windows Server 2008 Standard</td>
<td>TM24T-X9RMF-VWXK6-X8JC9-BFGM2</td>
</tr>
<tr>
<td>Windows Server 2008 Standard without Hyper-V</td>
<td>W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ</td>
</tr>
<tr>
<td>Windows Server 2008 Enterprise</td>
<td>YQGMW-MPWTJ-34KDK-48M3W-X4Q6V</td>
</tr>
<tr>
<td>Windows Server 2008 Enterprise without Hyper-V</td>
<td>39BXF-X8Q23-P2WWT-38T2F-G3FPG</td>
</tr>
<tr>
<td>Windows Server 2008 HPC</td>
<td>RCTX3-KWVHP-BR6TB-RB6DM-6X7HP</td>
</tr>
<tr>
<td>Windows Server 2008 Datacenter</td>
<td>7M67G-PC374-GR742-YH8V4-TCBY3</td>
</tr>
<tr>
<td>Windows Server 2008 Datacenter without Hyper-V</td>
<td>22XQ2-VRXRG-P8D42-K34TD-G3QQC</td>
</tr>
<tr>
<td>Windows Server 2008 for Itanium-Based Systems</td>
<td>4DWFP-JF3DJ-B7DTH-78FJB-PDRHK</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ docker多阶段构建离线yum源(修改)]]></title>
        <id>https://kill0es.github.io/b8x2Z_v5U/</id>
        <link href="https://kill0es.github.io/b8x2Z_v5U/">
        </link>
        <updated>2021-05-18T06:13:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="docker多阶段构建离线yum源修改">docker多阶段构建离线yum源(修改)</h1>
<p>有需要就会有需求</p>
<h3 id="一-目录结构">一、目录结构</h3>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191203194741.png" alt="" loading="lazy"></figure>
<h3 id="二-dockerfile">二、Dockerfile</h3>
<pre><code class="language-dockerfile">#########################################################################################
FROM centos:7.4.1708 as build0
ENV EPEL_RELEASE=http://mirrors.aliyun.com/repo/epel-7.repo \
    DOCKER_REPO=https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
COPY pkg.list /
RUN mkdir /rpms \
    &amp;&amp; yum install -y  yum-utils \
    &amp;&amp; yum-config-manager --add-repo $EPEL_RELEASE \
    &amp;&amp; yum-config-manager --add-repo $DOCKER_REPO \
    &amp;&amp; yum install -y --downloadonly --downloaddir=/rpms $(cat /pkg.list)

#########################################################################################
FROM centos:7.5.1804 as build1
ENV EPEL_RELEASE=http://mirrors.aliyun.com/repo/epel-7.repo \
    DOCKER_REPO=https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
COPY pkg.list /
RUN mkdir /rpms \
    &amp;&amp; yum install -y  yum-utils \
    &amp;&amp; yum-config-manager --add-repo $EPEL_RELEASE \
    &amp;&amp; yum-config-manager --add-repo $DOCKER_REPO \
    &amp;&amp; yum install -y --downloadonly --downloaddir=/rpms $(cat /pkg.list)

#########################################################################################
FROM centos:7.6.1810 as build2
ENV EPEL_RELEASE=http://mirrors.aliyun.com/repo/epel-7.repo \
    DOCKER_REPO=https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
COPY pkg.list /
RUN mkdir /rpms \
    &amp;&amp; yum install -y  yum-utils  createrepo \
    &amp;&amp; yum-config-manager --add-repo $EPEL_RELEASE \
    &amp;&amp; yum-config-manager --add-repo $DOCKER_REPO \
    &amp;&amp; yum install -y --downloadonly --downloaddir=/rpms $(cat /pkg.list)

COPY --from=build0 /rpms/* /rpms/
COPY --from=build1 /rpms/* /rpms/
RUN createrepo /rpms/

#########################################################################################	
FROM nginx:alpine
#RUN mkdir /usr/share/nginx/html/rpms
COPY --from=build2 /rpms/ /usr/share/nginx/html/rpms/
COPY index.html /usr/share/nginx/html/
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
</code></pre>
<h3 id="三-pkglist">三、pkg.list</h3>
<pre><code class="language-bash">docker-ce-19.03.4
docker-python 
docker-compose 
python-chardet 
python-requests
chrony audit rsync jq git tcpdump nc bind-utils net-tools ipvsadm graphviz tree lrzsz
</code></pre>
<h3 id="四-nginxconf">四、nginx.conf</h3>
<pre><code class="language-nginx">server {
    listen 80;
    server_name localhost;
    location / {
        root /usr/share/nginx/html;
        index index.html;
        autoindex on;
    }
    
    error_page 500 502 503 504  /50x.html;
    location = 50x.html {
        root /usr/share/nginx/html;
    }
}
</code></pre>
<h3 id="五-indexhtml">五、index.html</h3>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
		&lt;title&gt;Wise2C Yum Repo for Docker/K8S/Ceph/NFS installation&lt;/title&gt;
&lt;style&gt;
    body {
	            width: 35em;
			            margin: 0 auto;
					            font-family: Tahoma, Verdana, Arial, sans-serif;
							        }
&lt;/style&gt;
	&lt;/head&gt;
	&lt;body&gt;
		&lt;h1&gt;Wise2C Yum Repo for Docker/K8S/Ceph/NFS installation&lt;/h1&gt;
		&lt;p&gt;If you see this page, the nginx web server is successfully installed and
		working. Further configuration is required.&lt;/p&gt;

		&lt;p&gt;For online documentation and support please refer to
		&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;
		Commercial support is available at
		&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;

		&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;

		&lt;br /&gt;
		&lt;br /&gt;

		&lt;a href = &quot;rpms&quot; &gt;Enter the RPM folder &lt;/a&gt;&lt;br /&gt;

		&lt;br /&gt;
		&lt;br /&gt;

		&lt;p&gt;&lt;em&gt;Please create the file wise2c.repo as below and then move to /etc/yum.repos.d/&lt;/em&gt;&lt;/p&gt;

	&lt;script type=&quot;text/javascript&quot;&gt;
		  var ip = location.host;
  var comment = &quot;###############################################&quot;;
  document.write(comment.fontcolor(&quot;Red&quot;));
  document.write(&quot;&lt;pm&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;&quot;);
  document.write(&quot;[wise2c]&quot;+&quot;&lt;br&gt;&quot;);
  document.write(&quot;name=wise2c&quot;+&quot;&lt;br&gt;&quot;);
  document.write(&quot;baseurl=http://&quot;+(ip)+&quot;/rpms&quot;+&quot;&lt;br&gt;&quot;);
  document.write(&quot;enabled=1&quot;+&quot;&lt;br&gt;&quot;);
  document.write(&quot;gpgcheck=0&quot;+&quot;&lt;br&gt;&quot;);
  document.write(&quot;&lt;pm&gt;&lt;em&gt;&lt;/em&gt;&lt;/p&gt;&quot;);
  document.write(comment.fontcolor(&quot;Red&quot;));
	&lt;/script&gt;

	&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="六-最终效果">六、最终效果：</h3>
<pre><code class="language-bash">docker build -t offline-yum:v0.1 .
docker run -d --name offline-yum -p 80:80 offline-yum:v0.1 
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191203195513.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[wsl 另一个程序正在使用此文件，进程无法访问。]]></title>
        <id>https://kill0es.github.io/rev-xznuT/</id>
        <link href="https://kill0es.github.io/rev-xznuT/">
        </link>
        <updated>2021-05-17T05:48:44.000Z</updated>
        <content type="html"><![CDATA[<pre><code>wsl 另一个程序正在使用此文件，进程无法访问。
答案在结尾
1. vbs文件双击打开ubuntu20.04
shell连不上

2. 尝试【别忘了管理员打开cmd或powershell】
</code></pre>
<p>wsl -d ubuntu20.04<br>
报错：<br>
wsl 另一个程序正在使用此文件，进程无法访问。</p>
<p>网络：<br>
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</p>
<p>来自 <a href="https://blog.csdn.net/qq_38666896/article/details/113810463">https://blog.csdn.net/qq_38666896/article/details/113810463</a></p>
<p>不敢使用，</p>
<pre><code>1. 先 尝试重启虚拟化服务
</code></pre>
<p>net stop LxssManager</p>
<p>双击vbs<br>
还是连不上<br>
4. 再次重启<br>
net stop LxssManager</p>
<p>wsl进入<br>
wsl -d ubuntu20.04</p>
<p>还是报错<br>
另一个程序正在使用此文件，进程无法访问。</p>
<pre><code>5. 尝试
</code></pre>
<p>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux<br>
报错<br>
'Enable-WindowsOptionalFeature' 不是内部或外部命令，也不是可运行的程序<br>
或批处理文件。</p>
<pre><code>6. 使用powershell试试【管理员打开】
</code></pre>
<p>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</p>
<p>没报错</p>
<pre><code>7. 查看是否打开
</code></pre>
<p>wsl -l --running<br>
没有正在运行的分发。</p>
<pre><code>8. 尝试进入
</code></pre>
<p>wsl -d ubuntu20.04<br>
报错<br>
另一个程序正在使用此文件，进程无法访问。<br>
重启后就可以打开了</p>
<pre><code>9. 总结：
</code></pre>
<p>成因：<br>
【真假难以确认，需要重现，但的确操作过】<br>
在未开启的情况下尝试使用资源管理器打开该vhdx文件，导致资源管理器占用该文件<br>
【资源管理器无法打开该vhdx文件，是否真的能挂载是一个谜】<br>
踩坑：<br>
直接重启，或清理资源管理器缓存再重启，是没有用的<br>
【据网上所说，未重现，确认】</p>
<p>解决方案：<br>
A. 管理员打开powershell<br>
运行：<br>
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux<br>
B. 重启电脑</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ K8S安装过程笔记]]></title>
        <id>https://kill0es.github.io/f8YG9Dtq_/</id>
        <link href="https://kill0es.github.io/f8YG9Dtq_/">
        </link>
        <updated>2021-05-17T04:36:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="k8s安装过程笔记">K8S安装过程笔记</h1>
<p>以下所有操作均基于Cent OS 7操作系统。</p>
<p>来自：<a href="http://blog.hungtcs.top/2019/11/27/23-K8S%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E7%AC%94%E8%AE%B0/">http://blog.hungtcs.top/2019/11/27/23-K8S安装过程笔记/</a></p>
<h3 id="基本环境配置">基本环境配置</h3>
<ol>
<li>
<p>关闭selinux</p>
<pre><code>setenforce 0
sed -i &quot;s/SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config
</code></pre>
</li>
<li>
<p>关闭swap分区或禁用swap文件</p>
<pre><code>swapoff -a
# 注释掉关于swap分区的行
yes | cp /etc/fstab /etc/fstab_bak
cat /etc/fstab_bak |grep -v swap &gt; /etc/fstab
</code></pre>
</li>
<li>
<p>修改网卡配置</p>
<pre><code>$ vim /etc/sysctl.conf
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
$ sysctl -p
</code></pre>
</li>
<li>
<p>启用内核模块</p>
<pre><code>$ modprobe -- ip_vs
$ modprobe -- ip_vs_rr
$ modprobe -- ip_vs_wrr
$ modprobe -- ip_vs_sh
$ modprobe -- nf_conntrack_ipv4
$ cut -f1 -d &quot; &quot;  /proc/modules | grep -e ip_vs -e nf_conntrack_ipv4
$ vim /etc/sysconfig/modules/ipvs.modules
modprobe -- ip_vs
modprobe -- ip_vs_rr
modprobe -- ip_vs_wrr
modprobe -- ip_vs_sh
modprobe -- nf_conntrack_ipv4
</code></pre>
</li>
<li>
<p>关闭防火墙</p>
<pre><code>$ systemctl stop firewalld
$ systemctl disable firewalld
</code></pre>
</li>
<li>
<p>配置hosts</p>
</li>
</ol>
<h3 id="kubectl-kubeadm-kubelet的安装">kubectl、kubeadm、kubelet的安装</h3>
<h4 id="添加kubernetes的yum源">添加Kubernetes的yum源</h4>
<p>此处使用alibaba的镜像源</p>
<pre><code>$ vim /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=0
repo_gpgcheck=0
gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg
	http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
</code></pre>
<h4 id="安装kubelet-kubeadm-kubectl">安装kubelet、kubeadm、kubectl</h4>
<pre><code>$ yum install -y kubelet kubeadm kubectl
</code></pre>
<h4 id="启动kubelet服务">启动kubelet服务</h4>
<pre><code>$ systemctl enable kubelet
$ systemctl start kubelet
</code></pre>
<p>此时执行<code>systemctl status kubelet</code>查看服务状态，服务状态应为Error(255)， 如果是其他错误可使用<code>journalctl -xe</code>查看错误信息。</p>
<h3 id="docker安装和配置">Docker安装和配置</h3>
<h4 id="docker安装">Docker安装</h4>
<p>docker的安装请查看官网文档(Overview of Docker editions)[https://docs.docker.com/install/overview/]</p>
<h4 id="docker配置">Docker配置</h4>
<ol>
<li>
<p>配置cgroup-driver为systemd</p>
<pre><code># 查看cgroup-driver
$ docker info | grep -i cgroup
# 追加 --exec-opt native.cgroupdriver=systemd 参数
$ sed -i &quot;s#^ExecStart=/usr/bin/dockerd.*#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --exec-opt native.cgroupdriver=systemd#g&quot; /usr/lib/systemd/system/docker.service
$ systemctl daemon-reload # 重新加载服务
$ systemctl enable docker # 启用docker服务(开机自起)
$ systemctl restart docker # 启动docker服务
# 或者修改docker配置文件
$ vim /etc/docker/daemon.json
{
  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]
}
</code></pre>
</li>
<li>
<p>预先拉取所需镜像</p>
<pre><code># 查看kubeadm所需镜像
$ kubeadm config images list
k8s.gcr.io/kube-apiserver:v1.16.3
k8s.gcr.io/kube-controller-manager:v1.16.3
k8s.gcr.io/kube-scheduler:v1.16.3
k8s.gcr.io/kube-proxy:v1.16.3
k8s.gcr.io/pause:3.1
k8s.gcr.io/etcd:3.3.15-0
k8s.gcr.io/coredns:1.6.2
# 拉取镜像
$ docker pull kubeimage/kube-apiserver-amd64:v1.16.3
$ docker pull kubeimage/kube-controller-manager-amd64:v1.16.3
$ docker pull kubeimage/kube-scheduler-amd64:v1.16.3
$ docker pull kubeimage/kube-proxy-amd64:v1.16.3
$ docker pull kubeimage/pause-amd64:3.1
$ docker pull kubeimage/etcd-amd64:3.3.15-0
$ docker pull coredns/coredns:1.6.2
</code></pre>
</li>
<li>
<p>对预先拉取的镜像重新打tag</p>
<pre><code>$ docker tag kubeimage/kube-apiserver-amd64:v1.16.3  k8s.gcr.io/kube-apiserver:v1.16.3
$ docker tag kubeimage/kube-controller-manager-amd64:v1.16.3  k8s.gcr.io/kube-controller-manager:v1.16.3
$ docker tag kubeimage/kube-scheduler-amd64:v1.16.3  k8s.gcr.io/kube-scheduler:v1.16.3
$ docker tag kubeimage/kube-proxy-amd64:v1.16.3 k8s.gcr.io/kube-proxy:v1.16.3
$ docker tag kubeimage/pause-amd64:3.1 k8s.gcr.io/pause:3.1
$ docker tag kubeimage/etcd-amd64:3.3.15-0 k8s.gcr.io/etcd:3.3.15-0
$ docker tag coredns/coredns:1.6.2 k8s.gcr.io/coredns:1.6.2
</code></pre>
</li>
</ol>
<h3 id="master节点的配置">Master节点的配置</h3>
<p><strong>以上步骤需要在node节点和master节点执行，当前步骤仅需在master节点执行。</strong></p>
<h4 id="master节点的初始化">Master节点的初始化</h4>
<pre><code># 初始化master节点，
# --pod-network-cidr=192.168.0.0/16 指定使用Calico网络
# --apiserver-advertise-address=10.0.0.5 指向master节点IP，此处也可以使用hosts
$ kubeadm init --pod-network-cidr=10.244.0.0/16 \
  --kubernetes-version=v1.16.3 \
  --apiserver-advertise-address=10.0.0.5
</code></pre>
<p>执行上述命令的输出为：</p>
<pre><code>[init] Using Kubernetes version: v1.16.3
[preflight] Running pre-flight checks
	[WARNING SystemVerification]: this Docker version is not on the list of validated versions: 19.03.4. Latest validated version: 18.09
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;
[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;
[kubelet-start] Activating the kubelet service
[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;
[certs] Generating &quot;ca&quot; certificate and key
[certs] Generating &quot;apiserver&quot; certificate and key
[certs] apiserver serving cert is signed for DNS names [master kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.0.0.5]
[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key
[certs] Generating &quot;front-proxy-ca&quot; certificate and key
[certs] Generating &quot;front-proxy-client&quot; certificate and key
[certs] Generating &quot;etcd/ca&quot; certificate and key
[certs] Generating &quot;etcd/server&quot; certificate and key
[certs] etcd/server serving cert is signed for DNS names [master localhost] and IPs [10.0.0.5 127.0.0.1 ::1]
[certs] Generating &quot;etcd/peer&quot; certificate and key
[certs] etcd/peer serving cert is signed for DNS names [master localhost] and IPs [10.0.0.5 127.0.0.1 ::1]
[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key
[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key
[certs] Generating &quot;sa&quot; key and public key
[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;
[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file
[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file
[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file
[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file
[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;
[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;
[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;
[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;
[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;
[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s
[apiclient] All control plane components are healthy after 13.002108 seconds
[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace
[kubelet] Creating a ConfigMap &quot;kubelet-config-1.16&quot; in namespace kube-system with the configuration for the kubelets in the cluster
[upload-certs] Skipping phase. Please see --upload-certs
[mark-control-plane] Marking the node master as control-plane by adding the label &quot;node-role.kubernetes.io/master=''&quot;
[mark-control-plane] Marking the node master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]
[bootstrap-token] Using token: kt58np.djd3youoqb0bnz4r
[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace
[addons] Applied essential addon: CoreDNS
[addons] Applied essential addon: kube-proxy

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.0.5:6443 --token kt58np.djd3youoqb0bnz4r \
    --discovery-token-ca-cert-hash sha256:37a3924142dc6d57eac2714e539c174ee3b0cda723746ada2464ac9e8a2091ce
</code></pre>
<p>保存输出中的<code>kubeadm join</code>部分内容，用于添加node节点，或者使用<code>kubeadm token list</code> 和<code>kubeadm token create --print-join-command</code>查看</p>
<pre><code>$ kubeadm join 10.0.0.5:6443 --token kt58np.djd3youoqb0bnz4r \
		--discovery-token-ca-cert-hash sha256:37a3924142dc6d57eac2714e539c174ee3b0cda723746ada2464ac9e8a2091ce
</code></pre>
<p>接下来执行剩余的初始化步骤</p>
<pre><code>$ mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config
</code></pre>
<h4 id="calico网络插件的配置">Calico网络插件的配置</h4>
<p>Calico的官方文档地址为： https://docs.projectcalico.org/v3.10/getting-started/kubernetes/。 具体安装步骤：</p>
<ol>
<li>
<p>安装Calico</p>
<pre><code>$ kubectl apply -f https://docs.projectcalico.org/v3.10/manifests/calico.yaml
</code></pre>
</li>
<li>
<p>监听安装进度</p>
<pre><code>$ watch kubectl get pods --all-namespaces
</code></pre>
</li>
</ol>
<p>出现以下内容时为安装成功</p>
<pre><code>NAMESPACE    NAME                                       READY  STATUS   RESTARTS  AGE
kube-system  calico-kube-controllers-6ff88bf6d4-tgtzb   1/1    Running  0         2m45s
kube-system  calico-node-24h85                          1/1    Running  0         2m43s
kube-system  coredns-846jhw23g9-9af73                   1/1    Running  0         4m5s
kube-system  coredns-846jhw23g9-hmswk                   1/1    Running  0         4m5s
kube-system  etcd-jbaker-1                              1/1    Running  0         6m22s
kube-system  kube-apiserver-jbaker-1                    1/1    Running  0         6m12s
kube-system  kube-controller-manager-jbaker-1           1/1    Running  0         6m16s
kube-system  kube-proxy-8fzp2                           1/1    Running  0         5m16s
kube-system  kube-scheduler-jbaker-1                    1/1    Running  0         5m41s
</code></pre>
<ol>
<li>
<p>测试</p>
<pre><code>$ kubectl get nodes -o wide
NAME                STATUS     ROLES    AGE     VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME
kubernetes-master   Ready      master   4d12h   v1.16.3   192.168.56.101   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1062.el7.x86_64   docker://19.3.4
</code></pre>
</li>
</ol>
<h3 id="node节点的初始化">Node节点的初始化</h3>
<ol>
<li>
<p>登录node节点，执行加入集群的命令，完成加入集群操作</p>
<pre><code>$ kubeadm join 10.0.0.5:6443 --token kt58np.djd3youoqb0bnz4r \
    --discovery-token-ca-cert-hash sha256:37a3924142dc6d57eac2714e539c174ee3b0cda723746ada2464ac9e8a2091ce
</code></pre>
</li>
<li>
<p>在master节点上查看添加结果</p>
<pre><code>$ kubectl get nodes -o wide
NAME                STATUS     ROLES    AGE     VERSION   INTERNAL-IP      EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION           CONTAINER-RUNTIME
kubernetes-master   Ready      master   4d12h   v1.16.3   192.168.56.101   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1062.el7.x86_64   docker://19.3.4
kubernetes-node-1   Ready      &lt;none&gt;   4d12h   v1.16.3   192.168.56.102   &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-1062.el7.x86_64   docker://19.3.4
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ ubuntu16.04图形化基础配置]]></title>
        <id>https://kill0es.github.io/f_vQ7vXqk/</id>
        <link href="https://kill0es.github.io/f_vQ7vXqk/">
        </link>
        <updated>2021-05-14T21:10:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ubuntu1604图形化基础配置">ubuntu16.04图形化基础配置</h1>
<h3 id="一-安装略">一、安装：略</h3>
<h3 id="二-环境配置">二、环境配置</h3>
<h4 id="21软件源">2.1软件源</h4>
<p>参考server</p>
<h4 id="22安装常用命令">2.2安装常用命令</h4>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191128112548.png" alt="" loading="lazy"></figure>
<h4 id="23设置语言">2.3设置语言</h4>
<p>设置里</p>
<h4 id="24搜狗输入法">2.4搜狗输入法</h4>
<p>官方网站</p>
<h4 id="25wps">2.5wps</h4>
<p>官网</p>
<h4 id="26ffmpeg转码器">2.6ffmpeg转码器</h4>
<pre><code class="language-bash">sudo apt-get install ffmpeg
</code></pre>
<h4 id="27播放器">2.7播放器</h4>
<p>参考：https://www.jianshu.com/p/f24252c632d0</p>
<pre><code class="language-bash">sudo apt-get install smplayer
</code></pre>
<h4 id="28单机vnc">2.8单机vnc</h4>
<p>x11vnc</p>
<h4 id="29real-vnc-v66">2.9real vnc v6.6</h4>
<p>支持多用户连:https://www.realvnc.com/en/connect/download/vnc/linux/</p>
<h4 id="210-文本编辑器">2.10 文本编辑器</h4>
<p>vscode  notepad</p>
<h4 id="211-markdown">2.11 markdown</h4>
<p>trpora</p>
<h4 id="212-3d特效">2.12 3D特效</h4>
<pre><code class="language-bash">sudo apt-get install compiz-plugins compizconfig-setti ngs-manager

</code></pre>
<h4 id="213左边菜单栏在底部显示">2.13左边菜单栏在底部显示</h4>
<pre><code class="language-bash">$ gsettings set com.canonical.Unity.Launcher launcher-position Bottom
</code></pre>
<h4 id="214-vmware桥接网卡配置">2.14 vmware桥接网卡配置</h4>
<p>https://kb.vmware.com/s/article/287?lang=zh_CN</p>
<pre><code class="language-bash">chmod a+rw /dev/vmnet0
</code></pre>
<h4 id="215-远程链接工具">2.15 远程链接工具</h4>
<p>securecrt</p>
<h4 id="216-python">2.16 python</h4>
<p>pycharm</p>
<h4 id="217-java">2.17 java</h4>
<p>eclipse</p>
<p>Intellij IDEA</p>
<h3 id="三-基于ubuntu的系统">三、基于ubuntu的系统：</h3>
<p>Elementary OS：很好看</p>
<p>优麒麟，不好用</p>
<h3 id="四-基于debian的deepin">四、基于debian的deepin</h3>
<p>软件多，好看，华为linux笔记本自带此系统</p>
<p>ubuntu官方有openstack，kubernetes解决方案</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ EFK教程三：ElasticSearch多实例部署]]></title>
        <id>https://kill0es.github.io/P2z_fsOWw/</id>
        <link href="https://kill0es.github.io/P2z_fsOWw/">
        </link>
        <updated>2021-05-13T20:14:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="efk教程三elasticsearch多实例部署">EFK教程三：ElasticSearch多实例部署</h1>
<h3 id="用途">用途：</h3>
<p>▷ 在第一篇《EFK教程 - 快速入门指南》中，阐述了EFK的安装部署，其中ES的架构为三节点，即master、ingest、data角色同时部署在三台服务器上。</p>
<p>▷ 在第二篇《EFK教程 - ElasticSearch高性能高可用架构》中，阐述了EFK的data/ingest/master角色的用途及分别部署三节点，在实现性能最大化的同时保障高可用</p>
<p>前两篇文章，ES集群中只存在一个实例，而在本文中，将在一个集群中部署多个ES实例，来实现资源合理分配。例如data服务器存在SSD与SAS硬盘，可以将热数据存放到SSD，而冷数据存放到SAS，实现数据冷热分离。</p>
<p><strong>▷ 服务器配置：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">IP</th>
<th style="text-align:center">CPU</th>
<th style="text-align:center">内存</th>
<th>SAS硬盘</th>
<th>SSD硬盘</th>
<th>访问端口</th>
<th>运输端口</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>filebeat</strong></td>
<td style="text-align:center"><strong>172.18.1.237</strong></td>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"><strong>2G</strong></td>
<td><strong>/</strong></td>
<td>/</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:center"><strong>kibana</strong></td>
<td style="text-align:center"><strong>172.18.4.4</strong></td>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"><strong>2G</strong></td>
<td><strong>/</strong></td>
<td>/</td>
<td>5601</td>
<td>/</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-master-1</strong></td>
<td style="text-align:center"><strong>172.18.3.138</strong></td>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center"><strong>4G</strong></td>
<td><strong>/</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-master-2</strong></td>
<td style="text-align:center"><strong>172.18.3.139</strong></td>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center"><strong>4G</strong></td>
<td><strong>/</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-master-3</strong></td>
<td style="text-align:center"><strong>172.18.3.253</strong></td>
<td style="text-align:center"><strong>4</strong></td>
<td style="text-align:center"><strong>4G</strong></td>
<td><strong>/</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-ingest-1</strong></td>
<td style="text-align:center"><strong>172.18.4.18</strong></td>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td><strong>/</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-ingest-2</strong></td>
<td style="text-align:center"><strong>172.18.4.19</strong></td>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td><strong>/</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-ingest-3</strong></td>
<td style="text-align:center"><strong>172.18.4.20</strong></td>
<td style="text-align:center"><strong>2</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td><strong>/</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-data-1-SAS</strong></td>
<td style="text-align:center"><strong>172.18.4.21</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td><strong>10G</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-data1-SSD</strong></td>
<td style="text-align:center"><strong>172.18.4.21</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td>/</td>
<td>10G</td>
<td><font color=red><strong>9201</strong></font></td>
<td><font color=red><strong>9301</strong></font></td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-data-2-SAS</strong></td>
<td style="text-align:center"><strong>172.18.4.22</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td><strong>10G</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-data-2-SSD</strong></td>
<td style="text-align:center"><strong>172.18.4.22</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td>/</td>
<td><strong>10G</strong></td>
<td><font color=red><strong>9201</strong></font></td>
<td><font color=red><strong>9301</strong></font></td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-data-3-SAS</strong></td>
<td style="text-align:center"><strong>172.18.4.23</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td><strong>10G</strong></td>
<td>/</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td style="text-align:center"><strong>elasticsearch-data-3-SSD</strong></td>
<td style="text-align:center"><strong>172.18.4.23</strong></td>
<td style="text-align:center"><strong>1</strong></td>
<td style="text-align:center"><strong>1G</strong></td>
<td>/</td>
<td><strong>10G</strong></td>
<td><font color=red><strong>9201</strong></font></td>
<td><font color=red><strong>9301</strong></font></td>
</tr>
</tbody>
</table>
<p><strong>▷ 架构图</strong></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191127133505.png" alt="" loading="lazy"></figure>
<h3 id="一-先启动各节点的服务">一、先启动各节点的服务</h3>
<pre><code class="language-bash">#master节点 共9个节点
sudo -u elasticsearch /opt/elasticsearch/bin/elasticsearch
#nginx节点
systemctl start nginx
</code></pre>
<p><strong>查看各节点的健康状态</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl http://172.18.3.138:9200/_cat/health?v
epoch      timestamp cluster     status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1574541947 20:45:47  007-project green           9         3     10   5    0    0        0             0                  -                100.0%
</code></pre>
<p><strong>查看集群节点列表</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl http://172.18.3.138:9200/_cat/nodes?v
ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
172.18.4.18            28          93   0    0.03    0.20     0.16 i         -      es-ingest1
172.18.4.21            10          94   1    0.48    0.73     0.37 d         -      es-data1
172.18.4.20            27          94   0    0.02    0.22     0.17 i         -      es-ingest3
172.18.3.139           12          48   0    0.05    0.16     0.13 m         -      es-2
172.18.4.22            10          93   1    0.45    0.69     0.35 d         -      es-data2
172.18.4.23            10          94   1    0.38    0.59     0.30 d         -      es-data3
172.18.4.19            28          93   0    0.03    0.27     0.20 i         -      es-ingest2
172.18.3.138           18          78   0    0.00    0.08     0.10 m         -      es-1
172.18.3.253           13          47   0    0.11    0.08     0.06 m         *      es-3
</code></pre>
<h3 id="二-es-data1部署双实例">二、es-data1部署双实例</h3>
<h4 id="1️⃣迁移索引">1️⃣迁移索引：</h4>
<p><strong>确保索引不在当前实例上</strong></p>
<pre><code class="language-bash">#当前索引分布在es-data1，es-data2，es-data3上
qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards?h=n&quot;
es-data3
es-data2
es-data2
es-data1
es-data3
es-data1
es-data3
es-data2
es-data2
es-data1
</code></pre>
<pre><code class="language-bash">#迁移索引到其他两个节点
qqq@qqq:~$ curl -X PUT &quot;http://172.18.3.138:9200/*/_settings?pretty&quot; -H 'Content-Type: application/json' -d'
&gt; {
&gt;     &quot;index.routing.allocation.include._ip&quot;: &quot;172.18.4.22,172.18.4.23&quot;
&gt; }'
{
  &quot;acknowledged&quot; : true
}
</code></pre>
<pre><code class="language-bash">#确认现在索引在es-data2核es-data3上
qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards?h=n&quot;
es-data3
es-data2
es-data3
es-data2
es-data3
es-data2
es-data3
es-data2
es-data3
es-data2
</code></pre>
<h4 id="2️⃣部署es-data1双实例">2️⃣部署es-data1双实例</h4>
<p><strong>条件有限，没有挂载新的硬盘用，创建目录代替</strong></p>
<table>
<thead>
<tr>
<th>代码目录</th>
<th>数据目录</th>
<th>访问端口</th>
<th>运输端口</th>
</tr>
</thead>
<tbody>
<tr>
<td>/opt/elasticsearch-SAS</td>
<td>/data/SAS</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td>/opt/elasticsearch-SSD</td>
<td>/data/SSD</td>
<td>9201</td>
<td>9301</td>
</tr>
</tbody>
</table>
<pre><code class="language-bash">#改原来的实例
[root@es-data1 opt]# pkill elasticsearch
[root@es-data1 opt]# mv elasticsearch elasticsearch-SAS
[root@es-data1 opt]# mkdir -p /opt/logs/elasticsearch-SAS
[root@es-data1 ~]# chown elasticsearch.elasticsearch /opt/logs/elasticsearch-SAS -R

#SAS实例/opt/elasticsearch-SAS/config/elasticsearch.yml配置
[root@es-data1 opt]# grep -Ev '^$|^#' /opt/elasticsearch-SAS/config/elasticsearch.yml
cluster.name: 007-project
node.name: es-data1-SAS
path.data: /data/SAS
path.logs: /opt/logs/elasticsearch-SAS
network.host: 172.18.4.21
http.port: 9200
transport.port: 9300
#端口一定要加
discovery.seed_hosts: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;, &quot;es-3:9300&quot;]
cluster.initial_master_nodes: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;,&quot;es-3:9300&quot;]
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
node.master: false
node.ingest: false
node.data: true
# 本机只允行启2个实例
node.max_local_storage_nodes: 2
</code></pre>
<pre><code class="language-bash">#SSD实例
[root@es-data1 opt]# tar xf software/elasticsearch-7.3.2-linux-x86_64.tar.gz -C /opt/
[root@es-data1 opt]# mv elasticsearch-7.3.2 elasticsearch-SSD
[root@es-data1 opt]# mkdir /data/SSD  /opt/logs/elasticsearch-SSD
[root@es-data1 ~]# chown elasticsearch.elasticsearch /data/SSD  /opt/logs/elasticsearch-SSD /opt/elasticsearch-SSD  -R

#SSD实例/opt/elasticsearch-SSD/config/elasticsearch.yml配置
[root@es-data1 opt]# grep -Ev '^$|^#' /opt/elasticsearch-SSD/config/elasticsearch.yml
cluster.name: 007-project
node.name: es-data1-SSD
path.data: /data/SSD
path.logs: /opt/logs/elasticsearch-SSD
network.host: 172.18.4.21
#端口不能和SAS实例一样，master必须指定端口
http.port: 9201
transport.port: 9301
discovery.seed_hosts: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;, &quot;es-3:9300&quot;]
cluster.initial_master_nodes: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;,&quot;es-3:9300&quot;]
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
node.master: false
node.ingest: false
node.data: true
node.max_local_storage_nodes: 2
</code></pre>
<pre><code class="language-bash">#启动两个elasticsearch实例
sudo -u elasticsearch /opt/elasticsearch-SAS/bin/elasticsearch
sudo -u elasticsearch /opt/elasticsearch-SSD/bin/elasticsearch
</code></pre>
<h3 id="三-es-data2部署双实例">三、es-data2部署双实例</h3>
<h4 id="1️⃣迁移索引-2">1️⃣迁移索引：</h4>
<p><strong>条件有限，没有挂载新的硬盘用，创建目录代替</strong></p>
<table>
<thead>
<tr>
<th>代码目录</th>
<th>数据目录</th>
<th>访问端口</th>
<th>运输端口</th>
</tr>
</thead>
<tbody>
<tr>
<td>/opt/elasticsearch-SAS</td>
<td>/data/SAS</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td>/opt/elasticsearch-SSD</td>
<td>/data/SSD</td>
<td>9201</td>
<td>9301</td>
</tr>
</tbody>
</table>
<p><strong>确保索引不在当前实例上</strong></p>
<p><strong>当前索引在es-data2，es-data3上</strong></p>
<pre><code class="language-bash">#当前索引在es-data2，es-data3上
qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards?h=n&quot;
es-data3
es-data2
es-data3
es-data2
es-data3
es-data2
es-data3
es-data2
es-data3
es-data2
</code></pre>
<p><strong>当前集群节点查看</strong></p>
<pre><code class="language-bash">#当前集群节点查看
qqq@qqq:~$ curl http://172.18.3.138:9200/_cat/nodes?v
ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
172.18.4.20            22          92   0    0.00    0.01     0.05 i         -      es-ingest3
172.18.4.22            10          92   0    0.00    0.03     0.05 d         -      es-data2
172.18.4.23             8          92   0    0.00    0.01     0.05 d         -      es-data3
172.18.3.253           24          48   0    0.00    0.01     0.05 m         *      es-3
172.18.4.18            23          92   0    0.01    0.03     0.05 i         -      es-ingest1
172.18.4.21            10          93  23    0.07    0.56     0.50 d         -      es-data1-SAS
172.18.4.19            23          92   0    0.00    0.01     0.05 i         -      es-ingest2
172.18.4.21             7          93   7    0.07    0.56     0.50 d         -      es-data1-SSD
172.18.3.139            9          49   0    0.00    0.01     0.05 m         -      es-2
172.18.3.138           13          79   0    0.02    0.03     0.05 m         -      es-1
</code></pre>
<p><strong>迁移索引到别的节点</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl -X PUT &quot;http://172.18.3.138:9200/*/_settings?pretty&quot; -H 'Content-Type: application/json' -d'
{
    &quot;index.routing.allocation.include._ip&quot;: &quot;172.18.4.21,172.18.4.23&quot;
}'
{
  &quot;acknowledged&quot; : true
}
</code></pre>
<p><strong>查看当前索引位置</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards?h=n&quot;
es-data1-SSD
es-data1-SAS
es-data3
es-data1-SSD
es-data3
es-data1-SAS
es-data3
es-data1-SAS
es-data3
es-data1-SSD
</code></pre>
<h4 id="2️⃣部署es-data2双实例">2️⃣部署es-data2双实例</h4>
<p><strong>旧的SAS实例</strong></p>
<pre><code class="language-bash">#杀死旧进程
[root@es-data2 ~]# ps -ef | grep ela
root      18205  18186  0 01:42 pts/0    00:00:00 sudo -u elasticsearch /opt/elasticsearch/bin/elasticsearch
......
[root@es-data2 ~]# kill 18205
#改名字等
[root@es-data2 opt]# mv elasticsearch elasticsearch-SAS
[root@es-data2 opt]# mkdir -p /opt/logs/elasticsearch-SAS
[root@es-data2 opt]# chown elasticsearch.elasticsearch /opt/logs/elasticsearch-SAS -R

#SAS实例/opt/elasticsearch-SAS/config/elasticsearch.yml配置
[root@es-data2 opt]# grep -Ev '^$|^#' /opt/elasticsearch-SAS/config/elasticsearch.yml
cluster.name: 007-project
#名字要改
node.name: es-data2-SAS
path.data: /data/SAS
path.logs: /opt/logs/elasticsearch-SAS
network.host: 172.18.4.22
#端口加上。不写的话默认就是9200和9300，master节点要加上端口
http.port: 9200
transport.port: 9300
discovery.seed_hosts: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;, &quot;es-3:9300&quot;]
cluster.initial_master_nodes: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;,&quot;es-3:9300&quot;]
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
node.master: false
node.ingest: false
node.data: true
</code></pre>
<p><strong>新的SSD实例</strong></p>
<p>注意节点名字，data位置，log位置，本结点访问端口，本结点运输端口，集群中其他主机及端口号，master节点端口号</p>
<pre><code class="language-bash">[root@es-data2 opt]# tar xf software/elasticsearch-7.3.2-linux-x86_64.tar.gz -C /opt/
[root@es-data2 opt]# mv elasticsearch-7.3.2 elasticsearch-SSD
[root@es-data2 opt]# mkdir /data/SSD  /opt/logs/elasticsearch-SSD
[root@es-data2 opt]# chown elasticsearch.elasticsearch /data/SSD  /opt/logs/elasticsearch-SSD /opt/elasticsearch-SSD  -R

#SSD实例/opt/elasticsearch-SAS/config/elasticsearch.yml配置
[root@es-data2 opt]# grep -Ev '^$|^#' /opt/elasticsearch-SSD/config/elasticsearch.yml
cluster.name: 007-project
node.name: es-data2-SSD
path.data: /data/SSD
path.logs: /opt/logs/elasticsearch-SSD
network.host: 172.18.4.22
http.port: 9201
transport.port: 9301
discovery.seed_hosts: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;, &quot;es-3:9300&quot;]
cluster.initial_master_nodes: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;,&quot;es-3:9300&quot;]
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
node.master: false
node.ingest: false
node.data: true
</code></pre>
<p><strong>启动两个实例：</strong></p>
<pre><code class="language-bash">#启动两个elasticsearch实例
sudo -u elasticsearch /opt/elasticsearch-SAS/bin/elasticsearch
sudo -u elasticsearch /opt/elasticsearch-SSD/bin/elasticsearch
</code></pre>
<h3 id="四-es-data3部署双实例">四、es-data3部署双实例</h3>
<h4 id="1️⃣迁移索引-3">1️⃣迁移索引：</h4>
<p><strong>条件有限，没有挂载新的硬盘用，创建目录代替</strong></p>
<table>
<thead>
<tr>
<th>代码目录</th>
<th>数据目录</th>
<th>访问端口</th>
<th>运输端口</th>
</tr>
</thead>
<tbody>
<tr>
<td>/opt/elasticsearch-SAS</td>
<td>/data/SAS</td>
<td>9200</td>
<td>9300</td>
</tr>
<tr>
<td>/opt/elasticsearch-SSD</td>
<td>/data/SSD</td>
<td>9201</td>
<td>9301</td>
</tr>
</tbody>
</table>
<p><strong>确保索引不在当前实例上</strong></p>
<p><strong>当前索引在es-data1，es-data3上</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards?h=n&quot;
es-data1-SSD
es-data1-SAS
es-data3
es-data1-SSD
es-data3
es-data1-SAS
es-data3
es-data1-SAS
es-data3
es-data1-SSD
</code></pre>
<p><strong>当前集群节点查看</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl http://172.18.3.138:9200/_cat/nodes?v
ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
172.18.4.22             8          94   1    0.05    0.63     0.45 d         -      es-data2-SSD
172.18.3.253           14          48   0    0.08    0.04     0.05 m         *      es-3
172.18.4.20            14          92   0    0.00    0.01     0.05 i         -      es-ingest3
172.18.4.22             9          94   1    0.05    0.63     0.45 d         -      es-data2-SAS
172.18.4.21            10          94   0    0.14    0.11     0.19 d         -      es-data1-SSD
172.18.3.139           29          49   0    0.00    0.01     0.05 m         -      es-2
172.18.4.23             9          93   0    0.00    0.03     0.05 d         -      es-data3
172.18.3.138           30          79   0    0.00    0.02     0.05 m         -      es-1
172.18.4.19            14          93   0    0.00    0.01     0.05 i         -      es-ingest2
172.18.4.21             7          94   0    0.14    0.11     0.19 d         -      es-data1-SAS
172.18.4.18            15          92   0    0.00    0.01     0.05 i         -      es-ingest1
</code></pre>
<p><strong>迁移索引到别的节点</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl -X PUT &quot;http://172.18.3.138:9200/*/_settings?pretty&quot; -H 'Content-Type: application/json' -d'
{
    &quot;index.routing.allocation.include._ip&quot;: &quot;172.18.4.21,172.18.4.22&quot;
}'
{
  &quot;acknowledged&quot; : true
}
</code></pre>
<p><strong>查看当前索引位置</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards?h=n&quot;
es-data1-SSD
es-data1-SAS
es-data2-SSD
es-data1-SSD
es-data2-SSD
es-data1-SAS
es-data2-SAS
es-data1-SAS
es-data2-SAS
es-data1-SSD
</code></pre>
<h4 id="2️⃣部署es-data2双实例-2">2️⃣部署es-data2双实例</h4>
<p><strong>旧的SAS实例</strong></p>
<pre><code class="language-bash">#温柔地杀死旧进程
[root@es-data3 ~]# kill $(ps -ef | grep ela | grep root | grep -v grep | awk '{print $2}')
#改名字等
[root@es-data3 opt]# mv elasticsearch elasticsearch-SAS
[root@es-data3 opt]# mkdir -p /opt/logs/elasticsearch-SAS
[root@es-data3 opt]# chown elasticsearch.elasticsearch /opt/logs/elasticsearch-SAS -R

#SAS实例/opt/elasticsearch-SAS/config/elasticsearch.yml配置
#注意节点名字，data位置，log位置，本结点访问端口，本结点运输端口，集群中其他主机及端口号，master节点端口号
[root@es-data3 opt]# grep -Ev '^$|^#' /opt/elasticsearch-SAS/config/elasticsearch.yml
cluster.name: 007-project
node.name: es-data3-SAS
path.data: /data/SAS
path.logs: /opt/logs/elasticsearch-SAS
network.host: 172.18.4.23
http.port: 9200
transport.port: 9300
discovery.seed_hosts: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;, &quot;es-3:9300&quot;]
cluster.initial_master_nodes: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;,&quot;es-3:9300&quot;]
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
node.master: false
node.ingest: false
node.data: true
</code></pre>
<p><strong>新的SSD实例</strong></p>
<p>注意节点名字，data位置，log位置，本结点访问端口，本结点运输端口，集群中其他主机及端口号，master节点端口号</p>
<pre><code class="language-bash">[root@es-data3 opt]# tar xf software/elasticsearch-7.3.2-linux-x86_64.tar.gz -C /opt/
[root@es-data3 opt]# mv elasticsearch-7.3.2 elasticsearch-SSD
[root@es-data3 opt]# mkdir /data/SSD  /opt/logs/elasticsearch-SSD
[root@es-data3 opt]# chown elasticsearch.elasticsearch /data/SSD  /opt/logs/elasticsearch-SSD /opt/elasticsearch-SSD  -R
[root@es-data3 opt]# cp  /opt/elasticsearch-SAS/config/elasticsearch.yml  /opt/elasticsearch-SSD/config/elasticsearch.yml
cp: overwrite ‘/opt/elasticsearch-SSD/config/elasticsearch.yml’? y
[root@es-data3 opt]# vim /opt/elasticsearch-SSD/config/elasticsearch.yml
[root@es-data3 opt]# grep -Ev '^$|^#' /opt/elasticsearch-SSD/config/elasticsearch.yml
cluster.name: 007-project
node.name: es-data3-SSD
path.data: /data/SSD
path.logs: /opt/logs/elasticsearch-SSD
network.host: 172.18.4.23
http.port: 9201
transport.port: 9301
discovery.seed_hosts: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;, &quot;es-3:9300&quot;]
cluster.initial_master_nodes: [&quot;es-1:9300&quot;, &quot;es-2:9300&quot;,&quot;es-3:9300&quot;]
http.cors.enabled: true
http.cors.allow-origin: &quot;*&quot;
node.master: false
node.ingest: false
node.data: true
</code></pre>
<p><strong>启动两个实例</strong></p>
<pre><code class="language-bash">#启动两个elasticsearch实例
sudo -u elasticsearch /opt/elasticsearch-SAS/bin/elasticsearch
sudo -u elasticsearch /opt/elasticsearch-SSD/bin/elasticsearch
</code></pre>
<h3 id="五-确认集群节点的信息">五、确认集群节点的信息</h3>
<h4 id="集群健康状态">集群健康状态：</h4>
<pre><code class="language-bash">qqq@qqq:~$ curl http://172.18.3.138:9200/_cat/health?v
epoch      timestamp cluster     status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1574551689 23:28:09  007-project green          12         6     10   5    0    0        0             0                  -                100.0%
</code></pre>
<h4 id="集群节点现在应该多了三个">集群节点现在应该多了三个</h4>
<pre><code class="language-bash">qqq@qqq:~$ curl http://172.18.3.138:9200/_cat/nodes?v
ip           heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
172.18.4.20            18          92   0    0.00    0.01     0.05 i         -      es-ingest3
172.18.4.23             9          92   1    0.34    1.15     0.65 d         -      es-data3-SAS
172.18.3.139            8          49   0    0.00    0.02     0.05 m         -      es-2
172.18.4.18            19          92   0    0.00    0.01     0.05 i         -      es-ingest1
172.18.4.22            11          93   0    0.09    0.16     0.24 d         -      es-data2-SAS
172.18.4.21            11          94   1    0.12    0.10     0.12 d         -      es-data1-SSD
172.18.3.138           20          79   0    0.00    0.01     0.05 m         -      es-1
172.18.4.21            13          94   1    0.12    0.10     0.12 d         -      es-data1-SAS
172.18.4.22            12          93   0    0.09    0.16     0.24 d         -      es-data2-SSD
172.18.3.253           11          48   0    0.00    0.01     0.05 m         *      es-3
172.18.4.23             8          92   1    0.34    1.15     0.65 d         -      es-data3-SSD
172.18.4.19            18          93   0    0.05    0.03     0.05 i         -      es-ingest2
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191127161414.png" alt="" loading="lazy"></figure>
<h4 id="当前索引位置">当前索引位置</h4>
<pre><code class="language-bash">qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards?h=n&quot;
es-data1-SSD
es-data1-SAS
es-data2-SSD
es-data1-SSD
es-data2-SSD
es-data1-SAS
es-data2-SAS
es-data1-SAS
es-data2-SAS
es-data1-SSD
</code></pre>
<p><strong>使用下面命令将索引迁移到每个data节点</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl -X PUT &quot;http://172.18.3.138:9200/*/_settings?pretty&quot; -H 'Content-Type: application/json' -d'
{
    &quot;index.routing.allocation.include._ip&quot;: &quot;172.18.4.21,172.18.4.22,172.18.4.23&quot;
}'
{
  &quot;acknowledged&quot; : true
}
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191127161816.png" alt="" loading="lazy"></figure>
<h3 id="六-测试">六、测试</h3>
<h4 id="将所有索引迁移到ssd硬盘上">将所有索引迁移到SSD硬盘上</h4>
<pre><code class="language-bash">qqq@qqq:~$ curl -X PUT &quot;http://172.18.3.138:9200/*/_settings?pretty&quot; -H 'Content-Type: application/json' -d'
{
  &quot;index.routing.allocation.include._host_ip&quot;: &quot;&quot;,
  &quot;index.routing.allocation.include._host&quot;: &quot;&quot;,
  &quot;index.routing.allocation.include._name&quot;: &quot;&quot;,
  &quot;index.routing.allocation.include._ip&quot;: &quot;&quot;,
  &quot;index.routing.allocation.require._name&quot;: &quot;*-SSD&quot;
}'
{
  &quot;acknowledged&quot; : true
}
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191127162133.png" alt="" loading="lazy"></figure>
<h4 id="确认所有索引全在ssd硬盘上">确认所有索引全在SSD硬盘上</h4>
<pre><code class="language-bash">qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards?h=n&quot;
es-data2-SSD
es-data1-SSD
es-data2-SSD
es-data3-SSD
es-data2-SSD
es-data3-SSD
es-data1-SSD
es-data3-SSD
es-data1-SSD
es-data3-SSD
</code></pre>
<p><strong>将nginx11月份的日志索引迁移到SAS硬盘上</strong></p>
<pre><code class="language-bash">qqq@qqq:~$ curl -X PUT &quot;http://172.18.3.138:9200/nginx_*_2019.11/_settings?pretty&quot; -H 'Content-Type: application/json' -d'
{
  &quot;index.routing.allocation.include._host_ip&quot;: &quot;&quot;,
  &quot;index.routing.allocation.include._host&quot;: &quot;&quot;,
  &quot;index.routing.allocation.include._name&quot;: &quot;&quot;,
  &quot;index.routing.allocation.include._ip&quot;: &quot;&quot;,
  &quot;index.routing.allocation.require._name&quot;: &quot;*-SAS&quot;
}'
{
  &quot;acknowledged&quot; : true
}
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191127171110.png" alt="" loading="lazy"></figure>
<pre><code class="language-bash">qqq@qqq:~$ curl &quot;http://172.18.3.138:9200/_cat/shards&quot;
nginx_access_2019.11             0 r STARTED     9  75.2kb 172.18.4.23 es-data3-SAS
nginx_access_2019.11             0 p STARTED     9  75.2kb 172.18.4.22 es-data2-SAS
kibana_sample_data_logs          0 p STARTED 14074  11.4mb 172.18.4.22 es-data2-SSD
kibana_sample_data_logs          0 r STARTED 14074  11.4mb 172.18.4.23 es-data3-SSD
filebeat-7.3.2-2019.11.17-000001 0 p STARTED     0    283b 172.18.4.22 es-data2-SSD
filebeat-7.3.2-2019.11.17-000001 0 r STARTED     0    283b 172.18.4.21 es-data1-SSD
.kibana_task_manager             0 p STARTED     2 128.2kb 172.18.4.22 es-data2-SSD
.kibana_task_manager             0 r STARTED     2 128.2kb 172.18.4.23 es-data3-SSD
.kibana_1                        0 r STARTED    43 223.3kb 172.18.4.21 es-data1-SSD
.kibana_1                        0 p STARTED    43 338.9kb 172.18.4.23 es-data3-SSD
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191127171157.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 修改nginx镜像时区]]></title>
        <id>https://kill0es.github.io/lg6bpjVDB/</id>
        <link href="https://kill0es.github.io/lg6bpjVDB/">
        </link>
        <updated>2021-05-09T14:36:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="修改nginx镜像时区">修改nginx镜像时区</h1>
<h3 id="问题">问题：</h3>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191126151825.png" alt="" loading="lazy"></figure>
<h3 id="容器时间正确的要求">容器时间正确的要求：</h3>
<ul>
<li><strong>宿主机时间正确</strong></li>
<li><strong>容器时区正确</strong></li>
</ul>
<h3 id="宿主机时间">宿主机时间</h3>
<pre><code class="language-bash">yum install -y chrony
systemctl enable chronyd &amp;&amp; systemctl restart chronyd
</code></pre>
<h3 id="容器时区">容器时区</h3>
<pre><code class="language-dockerfile">FROM nginx:alpine

RUN apk --no-cache add ca-certificates tzdata \
    &amp;&amp; \cp -a /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    &amp;&amp; apk del tzdata ca-certificates \
    &amp;&amp; rm -rf /var/cache/apk/* 
</code></pre>
<pre><code class="language-bash">docker build -t nginx:alpine-1.2 .
</code></pre>
<p><strong>对比两个镜像大小</strong></p>
<pre><code class="language-bash">[root@openvpn ~]# docker image ls nginx
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               alpine-1.2          6ce437b36039        5 minutes ago       21.6MB
nginx               alpine              a624d888d69f        6 days ago          21.5MB
</code></pre>
<h3 id="日志时间正确了">日志时间正确了</h3>
<pre><code class="language-bash">$ docker run --name nginx2 -d -p 80:80  nginx:alpine-1.2
$ date
Tue Nov 26 15:34:26 CST 2019
$ docker logs -f nginx2
172.18.28.28 - - [26/Nov/2019:15:29:07 +0800] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36&quot; &quot;-&quot;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ ws+tls+web+cdn]]></title>
        <id>https://kill0es.github.io/JgHhiXdnK/</id>
        <link href="https://kill0es.github.io/JgHhiXdnK/">
        </link>
        <updated>2021-05-08T11:51:11.000Z</updated>
        <content type="html"><![CDATA[<h1 id="wstlswebcdn">ws+tls+web+cdn</h1>
<h3 id="一-ws就是websocket">一、ws就是websocket</h3>
<p><strong>配置就是加了个streamsettings，把network配置成ws即可</strong></p>
<h3 id="二-tls就是传输层安装协议">二、tls就是传输层安装协议</h3>
<p>也就是https证书，也就是说要有个域名</p>
<h3 id="三-web">三、web</h3>
<p>就是有个web页面用于伪装，这里用的是nginx，访问域名正常就跳到web界面，访问指定location跳转到vmess</p>
<h3 id="四-cdn就是用到了cdn">四、cdn，就是用到了cdn</h3>
<p>即cloudfare，找不到真实后端服务器（其实还是可以）</p>
<h3 id="五-整个实验使用docker部署">五、整个实验使用docker部署</h3>
<p><strong>如下图用到两个容器，一个nginx，一个vmess</strong></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191125185133.png" alt="" loading="lazy"></figure>
<h3 id="六-vmess的配置">六、vmess的配置</h3>
<pre><code class="language-bash">docker run -it --name vmess ubuntu:18.04 bash
apt update &amp;&amp; apt install curl -y
curl -sSL https://install.direct/go.sh | bash
</code></pre>
<pre><code class="language-bash">#制作一个配置文件，注意端口，监听地址，uuid，alterID，path
uuid=$(cat /proc/sys/kernel/random/uuid)
alterID=$(cat /dev/urandom | tr -dc '0-9'| head -c2)
path=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9'| head -c7)
</code></pre>
<pre><code class="language-json">cat &gt; /etc/v2ray/config.json &lt;&lt;'EOF'
{
  &quot;inbounds&quot;: [
    {
      &quot;port&quot;: 12345,
      &quot;listen&quot;:&quot;0.0.0.0&quot;,
      &quot;protocol&quot;: &quot;vmess&quot;,
      &quot;settings&quot;: {
        &quot;clients&quot;: [
          {
            &quot;id&quot;: &quot;6f5fcf5d-05aa-4ec5-8bca-8dc573116df4&quot;,
            &quot;alterId&quot;: 73
          }
        ]
      },
      &quot;streamSettings&quot;: {
        &quot;network&quot;: &quot;ws&quot;,
        &quot;wsSettings&quot;: {
        &quot;path&quot;: &quot;/4G4B18k/&quot;
        }
      }
    }
  ],
  &quot;outbounds&quot;: [
    {
      &quot;protocol&quot;: &quot;freedom&quot;,
      &quot;settings&quot;: {}
    }
  ]
}
EOF
</code></pre>
<pre><code class="language-bash">/etc/init.d/v2ray restart
</code></pre>
<h3 id="七-nginx配置">七、nginx配置</h3>
<pre><code class="language-bash">mkdir /data/nginx/{conf.d,ssl,www}  -p
</code></pre>
<p><strong>目录结构</strong></p>
<pre><code class="language-bash">[root@openvpn conf.d]# tree -C /data/nginx/
/data/nginx/
├── conf.d
│   └── bilibili.jd.com.conf
├── ssl
│   ├── bilibili.jd.com.crt
│   └── bilibili.jd.com.key
└── www
    ├── CSS3DRenderer.html
    └── index.html

3 directories, 5 files
</code></pre>
<p><strong>nginx配置</strong></p>
<p>proxy_pass那里还没经过测试，不行的话就用IP吧。<strong>注意：域名，证书，location的path</strong></p>
<pre><code class="language-nginx">[root@openvpn conf.d]# cat bilibili.jd.com.conf 
server {
  listen  443 ssl;
  server_name bilibili.jd.com;
  root /var/www;
  index index.html;
  ssl_certificate       /etc/nginx/ssl/bilibili.jd.com.crt;
  ssl_certificate_key   /etc/nginx/ssl/bilibili.jd.com.key;
  ssl_protocols         TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers           HIGH:!aNULL:!MD5;
        location /4G4B18k/ {
        proxy_redirect off;
        proxy_pass http://vmess:12345;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &quot;upgrade&quot;;
        proxy_set_header Host $http_host;

        # Show realip in v2ray access.log
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
}
</code></pre>
<p><strong>启动nginx</strong></p>
<pre><code class="language-bash">docker run -d --name nginx -p 443:443 -v /data/nginx/conf.d:/etc/nginx/conf.d -v /data/nginx/ssl:/etc/nginx/ssl -v /data/nginx/www:/var/www --link vmess  nginx:alpine
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ JS实现网站内容的禁止复制和粘贴、另存为]]></title>
        <id>https://kill0es.github.io/0tPsmegXQ/</id>
        <link href="https://kill0es.github.io/0tPsmegXQ/">
        </link>
        <updated>2021-05-08T11:49:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="js实现网站内容的禁止复制和粘贴-另存为">JS实现网站内容的禁止复制和粘贴、另存为</h1>
<p>参考：https://www.cnblogs.com/lxg0/p/7251386.html</p>
<p><strong>google搜索“document.oncontextmenu=true;document.onselectstart=true”会有更多详细文章</strong></p>
<p>使右键和复制失效</p>
<ul>
<li>使菜单&quot;文件&quot;－&quot;另存为&quot;失效”</li>
</ul>
<h2 id="使右键和复制失效">使右键和复制失效</h2>
<p><strong>方法一</strong></p>
<p>在网页中加入以下代码：</p>
<pre><code>`&lt;script language=``&quot;Javascript&quot;``&gt; ``document.oncontextmenu=``new` `Function(``&quot;event.returnValue=false&quot;``); ``document.onselectstart=``new` `Function(``&quot;event.returnValue=false&quot;``); ``&lt;/script&gt;`
</code></pre>
<h2 id="方法二">方法二</h2>
<p>在网页中加入以下代码：</p>
<pre><code>`&lt;``body` `oncontextmenu``=``&quot;return false&quot;` `onselectstart``=``&quot;return false&quot;``&gt;`
</code></pre>
<p>或者加入在<body>加入：</p>
<pre><code>`&lt;``body` `oncontextmenu``=``&quot;event.returnValue=false&quot;` `onselectstart``=``&quot;event.returnValue=false&quot;``&gt;`
</code></pre>
<h2 id="方法三">方法三</h2>
<p>如果只限制复制，可以在<body>加入以下代码：</p>
<pre><code>`&lt;``body` `oncopy``=``&quot;alert('对不起，禁止复制！');return false;&quot;``&gt;`
</code></pre>
<h2 id="使菜单文件-另存为失效">使菜单&quot;文件&quot;－&quot;另存为&quot;失效</h2>
<p>如果只是禁止了右键和选择复制，别人还可以通过浏览器菜单中的&quot;文件&quot;－&quot;另存为&quot;拷贝文件。为了使拷贝失效，可以在<body>与</body>之间加入以下代码：</p>
<pre><code>`&lt;``noscript``&gt;``&lt;``iframe` `src``=``&quot;*.htm&quot;``&gt;&lt;/``iframe``&gt;``&lt;/``noscript``&gt;`
</code></pre>
<p>这样，用户在另存网页时，就会出现&quot;无法保存Web页&quot;的错误。<br>
另外，也可以使用event.preventDefault() 方法来阻止oncontextmenu() 还有onselectstart()</p>
<pre><code>`document.oncontextmenu=function(evt){ ``evt.preventDefault(); ``}` `document.onselectstart=function(evt){ ``evt.preventDefault(); ``};`
</code></pre>
<p>既然可以禁止，那么当然也可以启用它，将事件重新赋值即可，可以赋值为null，或字符串、布尔值都行。如：</p>
<pre><code>`document.oncontextmenu=&quot;&quot;; ``document.onselectstart=true;`
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 关于docker的scratch镜像与helloworld]]></title>
        <id>https://kill0es.github.io/4ZumkVtyg/</id>
        <link href="https://kill0es.github.io/4ZumkVtyg/">
        </link>
        <updated>2021-05-07T11:31:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="关于docker的scratch镜像与helloworld">关于docker的scratch镜像与helloworld</h1>
<p>参考：https://hub.docker.com/_/scratch?tab=description</p>
<p>参考：https://segmentfault.com/a/1190000000628247</p>
<p><strong>FROM scratch</strong></p>
<p><strong>官方说明：该镜像是一个空的镜像，可以用于构建busybox等超小镜像，可以说是真正的从零开始构建属于自己的镜像。要知道，一个官方的ubuntu镜像有60MB+，CentOS镜像有70MB+</strong></p>
<p><strong>可以把一个可执行文件扔进来直接执行</strong></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191121131913.png" alt="" loading="lazy"></figure>
<h3 id="一-注意scratch不可用被pull">一、注意：scratch不可用被pull</h3>
<p><strong>FROM scratch专门用于构建最小镜像，直接pull会报以下错误，scratch是一个保留名称</strong></p>
<pre><code class="language-bash">[root@es-master1 ~]# docker pull scratch
Using default tag: latest
Error response from daemon: 'scratch' is a reserved name
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/52cto/PictureGo/master/img/20191121131832.png" alt="" loading="lazy"></figure>
<h3 id="二-如何制作大小为0-的镜像">二、如何制作大小为0 的镜像</h3>
<p><strong>既然scratch不能被拉取，如何做到<code>docker image ls</code>看到一个0字节的镜像</strong></p>
<p>官方给出了下面方法：</p>
<pre><code class="language-bash">$ tar cv --files-from /dev/null | docker import - scratch
$ docker image ls
REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
scratch                 latest              775bfce21429        9 minutes ago       0B
</code></pre>
<h3 id="三-如何跑一个helloworld">三、如何跑一个helloworld</h3>
<p>可以参考：https://github.com/docker-library/hello-world/</p>
<h4 id="31c语言不行docker是go语言写的跑的话报错">3.1C语言不行，docker是go语言写的，跑的话报错</h4>
<pre><code class="language-c">[root@es-master1 ~]# cat hello.c 
#include &lt;stdio.h&gt;

main() {
  printf(&quot;hello world\n&quot;);
}
</code></pre>
<pre><code class="language-bash">[root@es-master1 ~]# gcc hello.c -o hello
[root@es-master1 ~]# ll hello
-rwxr-xr-x 1 root root 8440 Nov 21 03:36 hello
</code></pre>
<p><strong>Dockerfile</strong></p>
<pre><code class="language-dockerfile">FROM scratch
COPY hello /
CMD [&quot;/hello&quot;]
</code></pre>
<pre><code class="language-bash">[root@es-master1 ~]# docker build -t hello .
[root@es-master1 ~]# docker image ls hello 
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello               latest              3b89b5056a03        5 minutes ago       8.44kB
</code></pre>
<p><strong>果然报错</strong></p>
<pre><code class="language-bash">[root@es-master1 ~]# docker run --rm hello
standard_init_linux.go:211: exec user process caused &quot;no such file or directory&quot;
</code></pre>
<p><strong>ubuntu当然可以</strong></p>
<pre><code class="language-bash">[root@es-master1 ~]# cat Dockerfile 
FROM ubuntu
COPY hello /
CMD [&quot;/hello&quot;]
[root@es-master1 ~]# docker build -t hello .
Sending build context to Docker daemon  24.63MB
Step 1/3 : FROM ubuntu
 ---&gt; 775349758637
Step 2/3 : COPY hello /
 ---&gt; 33de2082f11a
Step 3/3 : CMD [&quot;/hello&quot;]
 ---&gt; Running in 3d347f62b926
Removing intermediate container 3d347f62b926
 ---&gt; 1829a7bd40fe
Successfully built 1829a7bd40fe
Successfully tagged hello:latest
[root@es-master1 ~]# docker run --rm hello
hello world
</code></pre>
<p><strong>官方的这个竟然有点看不懂了，c语言：https://github.com/docker-library/hello-world</strong></p>
<pre><code class="language-bash">[root@es-master1 tmp]# git clone https://github.com/docker-library/hello-world.git
[root@es-master1 tmp]# cd hello-world/
[root@es-master1 hello-world]# make all
[root@es-master1 hello-world]# amd64/hello-world/hello 

Hello from Docker!
......
</code></pre>
<h4 id="32go语言">3.2go语言</h4>
<p><strong><s>使用go语言写：https://github.com/adriaandejonge/helloworld</s></strong></p>
<pre><code class="language-bash">[root@es-master1 hello-world]# tree -C .
.
├── Dockerfile
└── hello.go
0 directories, 2 files
</code></pre>
<pre><code class="language-go">[root@es-master1 hello-world]# cat hello.go 
package main
import &quot;fmt&quot;

func main(){
    fmt.Printf(&quot;hello world\n&quot;)
}
</code></pre>
<pre><code class="language-dockerfile">[root@es-master1 hello-world]# cat Dockerfile 
FROM google/golang as builder
WORKDIR /go/src/app
COPY hello.go .
RUN go build hello.go

FROM scratch
COPY --from=builder /go/src/app/hello /
CMD [&quot;/hello&quot;]
</code></pre>
<p><strong>一个helloworld都这么大...</strong></p>
<pre><code class="language-bash">[root@es-master1 hello-world]# docker build -t hello .
[root@es-master1 hello-world]# docker image ls hello
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello               latest              27eca431407a        2 minutes ago       2.36MB
[root@es-master1 hello-world]# docker run --rm hello
hello world
</code></pre>
<pre><code class="language-bash">[root@es-master1 hello-world]# docker image history hello
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
27eca431407a        3 minutes ago       /bin/sh -c #(nop)  CMD [&quot;/hello&quot;]               0B                  
1a35249e8575        3 minutes ago       /bin/sh -c #(nop) COPY file:7b1994197d7b5310…   2.36MB       
</code></pre>
<p><strong>也没用过go，网上了解到加个选项就能变小：https://www.jianshu.com/p/1405b0c2c5a3</strong></p>
<pre><code class="language-bash">[root@es-master1 hello-world]# cat Dockerfile 
FROM google/golang as builder
WORKDIR /go/src/app
COPY hello.go .
RUN go build -ldflags=&quot;-w -s&quot;  hello.go

FROM scratch
COPY --from=builder /go/src/app/hello /
CMD [&quot;/hello&quot;]
[root@es-master1 hello-world]# docker build -t hello .
[root@es-master1 hello-world]# docker image ls hello
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello               latest              df8b3c8897f9        8 seconds ago       1.65MB
</code></pre>
<h4 id="33改写官方的helloword">3.3改写官方的helloword</h4>
<p><strong>hello.c</strong></p>
<pre><code class="language-bash">[root@es-master1 ~]# cat hello.c 
//#include &lt;unistd.h&gt;
#include &lt;sys/syscall.h&gt;

#ifndef DOCKER_GREETING
	#define DOCKER_GREETING &quot;Hello from Docker!&quot;
#endif

const char message[] =
	DOCKER_GREETING &quot;\n&quot;;

void _start() {
	//write(1, message, sizeof(message) - 1);
	syscall(SYS_write, 1, message, sizeof(message) - 1);

	//_exit(0);
	syscall(SYS_exit, 0);
}
</code></pre>
<p><strong>编译</strong></p>
<pre><code class="language-bash">[root@es-master1 ~]# gcc -static -Os -nostartfiles -fno-asynchronous-unwind-tables -o './hello'  'hello.c'
[root@es-master1 ~]# strip -R .comment -s 'hello'
[root@es-master1 ~]# ./hello 
Hello from Docker!
</code></pre>
<p><strong>dockerfile</strong></p>
<pre><code class="language-bash">FROM scratch
COPY hello /
CMD [&quot;/hello&quot;]
</code></pre>
<pre><code class="language-bash">[root@es-master1 ~]# docker build -t hello .
#才1.06kB
[root@es-master1 ~]# docker image ls hello
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello               latest              3b204a40c8cb        14 seconds ago      1.06kB
[root@es-master1 ~]# docker run --rm hello
Hello from Docker!
</code></pre>
<h3 id="四-补充">四、补充</h3>
<ul>
<li>gcc -D可以定义宏，起到替换、条件编译的功能；即hello.c中定义了一个宏，我可以在gcc编译时使用-D替换该宏。就好像我docker镜像定义了一些变量，但是docker run仍可以-e传递变量，覆盖原有的变量</li>
<li>gcc -static指定强制使用静态库，</li>
<li>-O 对程序进行<strong>优化编译、链接</strong>。采用这个选项，整个源代码会在编译、链接过程中进行优化处理，这样产生的可执行文件的执行效率可以提高，但是编译、链接的速度就相应地要慢一些，而且对执行文件的调试会产生一定的影响，造成一些执行效果与对应源文件代码不一致等一些令人“困惑”的情况。因此，<strong>一般在编译输出软件发行版时使用此选项</strong>。</li>
<li>-Os     使用了所有-O2的优化选项，但又不缩减代码尺寸的方法 https://www.cnblogs.com/luolizhi/p/5737091.html</li>
<li>-nostartfiles 连接的使用不使用标准系统库。只有你指定的库才能够传递给连接器。不链接系统标准启动文件,而标准库文件仍然正常使用</li>
<li>-fno-asynchronous-unwind-tables   用来不生成CFI指令</li>
<li>-o 输出文件名</li>
<li>stribe   给文件脱裤子。具体就是从特定文件中<strong>剥掉</strong>一些<strong>符号信息</strong>和<strong>调试信息</strong>。 在strip之后， 文件变小了， 仍然可以执行， 这就就节省了很多空间。</li>
</ul>
]]></content>
    </entry>
</feed>